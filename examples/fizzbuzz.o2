fizz: 'Fizz'             ; define fizz literal
buzz: 'Buzz'             ; define buzz literal

       mov ra, 1         ; move 1 into ra
start: call calc_fizz
       call calc_buzz
       call print_number
       print_ascii 10    ; print newline
       inc ra            ; increment ra by 1
       test ra, 20       ; check if we've looped less than 20 times
       jle start         ; if so, jump back to start
       jmp end           ; otherwise, jump to end
print_number:
       pop rc            ; check if buzz was printed
       test rc, rc
       jnz skip          ; if it was, skip printing the number
       pop rc            ; check if fizz was printed
       test rc, rc
       jnz skip          ; if it was, skip printing the number
       print ra          ; print number
skip:  ret
calc_fizz:
       mov rb, ra        ; move ra into rb, temp value cloning
       mod rb, 3         ; modulo rb by 3
       test rb, rb       ; find out if the modulo result is zero
       jnz skip_fizz     ; if not, jump to skip_fizz
       print_ascii fizz  ; print fizz
       push 1            ; push 1 onto stack to indicate fizz was printed
       ret
skip_fizz:
       push 0            ; push 0 onto stack to indicate fizz was not printed
       ret
calc_buzz:
       mov rb, ra        ; move ra into rb, temp value cloning
       mod rb, 5         ; modulo rb by 5
       test rb, rb       ; find out if the modulo result is zero
       jnz skip_buzz     ; if not, jump to skip_buzz
       print_ascii buzz  ; print buzz
       push 1            ; push 1 onto stack to indicate buzz was printed
       ret
skip_buzz:
       push 0            ; push 0 onto stack to indicate buzz was not printed
       ret
end:
